#import <Foundation/Foundation.h>
#import "SWGApi.h"

/**
* Demo Client for Passmeister Apple Wallet and Google Wallet API
* [www.passmeister.com](https://www.passmeister.com).
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGPassApi: NSObject <SWGApi>

extern NSString* kSWGPassApiErrorDomain;
extern NSInteger kSWGPassApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
/// This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
///
/// @param passTypeId your pass type id, for example P963493 (Urban Fitness)
/// @param passId id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
/// 
///  code:200 message:"found existing pass and updated it",
///  code:201 message:"created a new pass",
///  code:400 message:"",
///  code:401 message:""
///
/// @return void
-(NSURLSessionTask*) createOrUpdatePassWithPassTypeId: (NSObject*) passTypeId
    passId: (NSObject*) passId
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete pass by pass id.
/// Delete pass by pass id.
///
/// @param passTypeId your pass type id, for example P963493 (Urban Fitness)
/// @param passId id of the pass
/// 
///  code:200 message:"",
///  code:400 message:"",
///  code:401 message:"",
///  code:404 message:""
///
/// @return void
-(NSURLSessionTask*) deletePassWithPassTypeId: (NSObject*) passTypeId
    passId: (NSObject*) passId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get pass information by pass id.
/// Get pass information by pass id.
///
/// @param passTypeId your pass type id, for example P963493 (Urban Fitness)
/// @param passId id of the pass
/// 
///  code:200 message:"found existing pass",
///  code:400 message:"",
///  code:401 message:"",
///  code:404 message:""
///
/// @return void
-(NSURLSessionTask*) getPassWithPassTypeId: (NSObject*) passTypeId
    passId: (NSObject*) passId
    completionHandler: (void (^)(NSError* error)) handler;


/// Retrieve the list of active pass ids for a given pass type.
/// Retrieve the list of active pass ids for a given pass type.
///
/// @param passTypeId your pass type id, for example P963493 (Urban Fitness)
/// @param page  (optional)
/// @param limit  (optional)
/// 
///  code:200 message:"list of found pass ids",
///  code:400 message:"",
///  code:401 message:""
///
/// @return void
-(NSURLSessionTask*) passListWithPassTypeId: (NSObject*) passTypeId
    page: (NSObject*) page
    limit: (NSObject*) limit
    completionHandler: (void (^)(NSError* error)) handler;


/// Send updates to all active passes for a given pass type.
/// For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
///
/// @param passTypeId your pass type id, for example P963493 (Urban Fitness)
/// 
///  code:200 message:"confirmation of sent updates",
///  code:400 message:"",
///  code:401 message:""
///
/// @return void
-(NSURLSessionTask*) passSyncWithPassTypeId: (NSObject*) passTypeId
    completionHandler: (void (^)(NSError* error)) handler;



@end
